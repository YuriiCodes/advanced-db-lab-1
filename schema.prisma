generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(uuid()) @map("id")
  username       String       @map("username")
  passwordHashed String       @map("passwordHashed")
  contactId      String       @unique @map("contactId")
  createdAt      DateTime     @default(now()) @map("createdAt")
  updatedAt      DateTime     @updatedAt @map("updatedAt")
  updatedBy      String       @map("updatedBy")
  orders         Order[]
  reviews        Review[]
  carts          Cart[]
  addresses      Address[]
  contactInfo    ContactInfo? @relation(fields: [contactId], references: [id])
}

model Product {
  id              String           @id @default(uuid()) @map("id")
  name            String           @map("name")
  description     String           @map("description")
  price           Float            @map("price")
  categoryId      String           @map("categoryId")
  createdAt       DateTime         @default(now()) @map("createdAt")
  updatedAt       DateTime         @updatedAt @map("updatedAt")
  updatedBy       String           @map("updatedBy")
  category        Category         @relation(fields: [categoryId], references: [id])
  orderProducts   OrderProduct[]
  reviews         Review[]
  discounts       Discount[]
  priceHistories  PriceHistory[]
  ProductSupplier ProductSupplier?
  cart            Cart?
}

model Order {
  id             String         @id @default(uuid()) @map("id")
  userId         String         @map("userId")
  statusId       String         @map("statusId")
  createdAt      DateTime       @default(now()) @map("createdAt")
  updatedAt      DateTime       @updatedAt @map("updatedAt")
  updatedBy      String         @map("updatedBy")
  user           User           @relation(fields: [userId], references: [id])
  status         OrderStatus    @relation(fields: [statusId], references: [id])
  orderProducts  OrderProduct[]
  payments       Payment[]
  shippings      Shipping[]
  orderHistories OrderHistory[]
}

model OrderProduct {
  id        String  @id @default(uuid()) @map("id")
  orderId   String  @map("orderId")
  productId String  @map("productId")
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Category {
  id          String    @id @default(uuid()) @map("id")
  name        String    @map("name")
  description String    @map("description")
  createdAt   DateTime  @default(now()) @map("createdAt")
  updatedAt   DateTime  @updatedAt @map("updatedAt")
  updatedBy   String    @map("updatedBy")
  products    Product[]
}

model Review {
  id        String   @id @default(uuid()) @map("id")
  productId String   @map("productId")
  userId    String   @map("userId")
  rating    Int      @map("rating")
  comment   String   @map("comment")
  createdAt DateTime @default(now()) @map("createdAt")
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Cart {
  id        String   @id @default(uuid()) @map("id")
  userId    String   @map("userId")
  productId String   @unique @map("productId")
  quantity  Int      @map("quantity")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Address {
  id        String   @id @default(uuid()) @map("id")
  userId    String   @map("userId")
  street    String   @map("street")
  city      String   @map("city")
  zipCode   String   @map("zipCode")
  country   String   @map("country")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  updatedBy String   @map("updatedBy")
  user      User     @relation(fields: [userId], references: [id])
}

model Payment {
  id            String   @id @default(uuid()) @map("id")
  orderId       String   @map("orderId")
  amount        Float    @map("amount")
  paymentMethod String   @map("paymentMethod")
  createdAt     DateTime @default(now()) @map("createdAt")
  order         Order    @relation(fields: [orderId], references: [id])
}

model Discount {
  id              String   @id @default(uuid()) @map("id")
  productId       String   @map("productId")
  discountPercent Int      @map("discountPercent")
  startDate       DateTime @map("startDate")
  endDate         DateTime @map("endDate")
  createdAt       DateTime @default(now()) @map("createdAt")
  updatedAt       DateTime @updatedAt @map("updatedAt")
  updatedBy       String   @map("updatedBy")
  product         Product  @relation(fields: [productId], references: [id])
}

model Shipping {
  id           String   @id @default(uuid()) @map("id")
  orderId      String   @map("orderId")
  addressId    String   @map("addressId")
  deliveryDate DateTime @map("deliveryDate")
  sendDate     DateTime @map("sendDate")
  createdAt    DateTime @default(now()) @map("createdAt")
  updatedAt    DateTime @updatedAt @map("updatedAt")
  order        Order    @relation(fields: [orderId], references: [id])
}

model OrderStatus {
  id          String   @id @default(uuid()) @map("id")
  name        String   @map("name")
  description String   @map("description")
  createdAt   DateTime @default(now()) @map("createdAt")
  orders      Order[]
}

model Supplier {
  id               String            @id @default(uuid()) @map("id")
  name             String            @map("name")
  description      String            @map("description")
  contactId        String            @unique @map("contactId")
  createdAt        DateTime          @default(now()) @map("createdAt")
  updatedAt        DateTime          @updatedAt @map("updatedAt")
  updatedBy        String            @map("updatedBy")
  contactInfo      ContactInfo       @relation(fields: [contactId], references: [id])
  productSuppliers ProductSupplier[]
}

model ProductSupplier {
  id         String   @id @default(uuid()) @map("id")
  productId  String   @unique @map("productId")
  supplierId String   @map("supplierId")
  product    Product  @relation(fields: [productId], references: [id])
  supplier   Supplier @relation(fields: [supplierId], references: [id])
}

model ContactInfo {
  id        String    @id @default(uuid()) @map("id")
  email     String    @map("email")
  phone     String    @map("phone")
  note      String    @map("note")
  createdAt DateTime  @default(now()) @map("createdAt")
  updatedAt DateTime  @updatedAt @map("updatedAt")
  updatedBy String    @map("updatedBy")
  user      User?
  supplier  Supplier?
}

model Warehouse {
  id        String   @id @default(uuid()) @map("id")
  name      String   @map("name")
  addressId String   @map("addressId")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  updatedBy String   @map("updatedBy")
}

model PriceHistory {
  id         String   @id @default(uuid()) @map("id")
  productId  String   @map("productId")
  oldPrice   Float    @map("oldPrice")
  newPrice   Float    @map("newPrice")
  changeDate DateTime @map("changeDate")
  createdAt  DateTime @default(now()) @map("createdAt")
  updatedAt  DateTime @updatedAt @map("updatedAt")
  updatedBy  String   @map("updatedBy")
  product    Product  @relation(fields: [productId], references: [id])
}

model OrderHistory {
  id          String   @id @default(uuid()) @map("id")
  orderId     String   @map("orderId")
  oldStatusId String   @map("oldStatusId")
  newStatusId String   @map("newStatusId")
  createdAt   DateTime @default(now()) @map("createdAt")
  updatedAt   DateTime @updatedAt @map("updatedAt")
  updatedBy   String   @map("updatedBy")
  order       Order    @relation(fields: [orderId], references: [id])
}
